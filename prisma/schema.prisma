generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model check_in {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  registration_id String?       @db.Uuid
  checked_in      Boolean?      @default(false)
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  registration    registration? @relation(fields: [registration_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model client {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  event       event[]
}

model data_analysis {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String?  @db.Uuid
  analysis   String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  event      event?   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model event {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @db.VarChar(255)
  client_id     String?         @db.Uuid
  manager_id    String?         @db.Uuid
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  data_analysis data_analysis[]
  client        client?         @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?           @relation(fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  promotion     promotion[]
  registration  registration[]
  session       session[]
  venue         venue[]
}

model promotion {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id    String?  @db.Uuid
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  event       event?   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model registration {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attendee_name String     @db.VarChar(255)
  event_id      String?    @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  check_in      check_in[]
  event         event?     @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  event_id   String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  event      event?   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String   @unique @db.VarChar(255)
  firstName   String?  @db.VarChar(255)
  lastName    String?  @db.VarChar(255)
  roq_user_id String   @db.VarChar(255)
  tenant_id   String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  client      client[]
  event       event[]
}

model venue {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  event_id   String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  event      event?   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
